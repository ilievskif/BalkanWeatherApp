{"version":3,"sources":["FrontSide/options.svg","FrontSide/WeatherIcon.js","FrontSide/FrontSideView.js","api.js","FrontSide/index.js","CitiesList/CityItem.js","CitiesList/index.js","BackSide.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","icon","src","alt","width","date","temperature","summary","currentCityName","apparentTemperature","onClick","className","format","WeatherIcon","parseInt","optionsImage","getWeatherForLocation","city","split","lat","long","fetch","mode","then","res","json","FrontSide","state","currentWeather","prevCityId","updateWeather","props","currentCity","weather","console","log","currently","setState","this","prevProps","prevState","FrontSideView","moment","title","nextProps","woeid","Component","CityItem","onSelect","isSelected","React","cities","map","CitiesList","App","flipped","onFlip","onSelectCity","BackSide","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e4c2d2e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/options.45c2c365.svg\";","import React from \"react\";\n\nexport default ({icon}) => {\n  return <img src={`/icons/${icon}.svg`} alt=\"weather icon\"\n  width=\"120px\"/>;\n};\n","import React from \"react\";\nimport \"./card.css\";\nimport optionsImage from \"./options.svg\";\nimport WeatherIcon from \"./WeatherIcon\";\n\nexport default ({\n  date,\n  icon,\n  temperature,\n  summary,\n  apparentTemperature,\n  currentCityName,\n  onClick\n}) => {\n  return (\n    <div className={`card is-${icon}`}>\n      <div className=\"card-row\">\n        <div className=\"card-day\">{date.format(\"dddd\")}</div>\n        <div className=\"card-day\">{date.format(\"MMM Do\")}</div>\n      </div>\n      <WeatherIcon icon={icon}/>\n      <div className=\"card-row\">\n        <div className=\"card-temperature\">\n          {`${parseInt(temperature,10)}°`}\n          {/* <span className=\"small\">/ {parseInt(apparentTemperature,10)}°</span> */}\n        </div>\n        <div className=\"card-weather\">{summary}</div>\n      </div>\n      <div className=\"card-line\" />\n      <div className=\"card-row\">\n        <div className=\"card-city\">{currentCityName}</div>\n        <button className=\"card-options\" onClick={onClick}>\n          <img src={optionsImage} width={32} alt=\"options\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n","\nexport const getWeatherForLocation = city => {\n  const [lat, long] = city[\"latt_long\"].split(\",\");\n  return fetch(\n    `https://weather-app-m.herokuapp.com/forecast/${lat},${long}`,\n    {\n      mode: \"cors\"\n    }\n  ).then(res => res.json());\n};\n","import React, { Component } from \"react\";\nimport FrontSideView from \"./FrontSideView\";\nimport moment from \"moment\";\nimport { getWeatherForLocation } from \"../api\";\n\nclass FrontSide extends Component {\n  state = { currentWeather: null, prevCityId: null };\n\n  updateWeather = () => {\n    getWeatherForLocation(this.props.currentCity).then(weather => {\n      console.log(weather.currently);\n      this.setState({ currentWeather: weather.currently });\n    });\n  };\n\n  componentDidMount() {\n    this.updateWeather();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.currentCity.woeid !== prevState.prevCityId) {\n      return {\n        prevCityId: nextProps.currentCity.woeid,\n        currentWeather: null\n      };\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.currentWeather) {\n      return null;\n    }\n    this.updateWeather();\n  }\n\n  render() {\n    if (!this.state.currentWeather) {\n      return null;\n    }\n\n    const {\n      icon,\n      temperature,\n      apparentTemperature,\n      summary\n    } = this.state.currentWeather;\n\n    return (\n      <FrontSideView\n        date={moment()}\n        icon={icon}\n        temperature={temperature}\n        apparentTemperature={apparentTemperature}\n        summary={summary}\n        currentCityName={this.props.currentCity.title}\n        onClick={this.props.onClick}\n      />\n    );\n  }\n}\n\nexport default FrontSide;\n","import React from \"react\";\n\nexport default class CityItem extends React.Component {\n\n  onClick = () => {\n    const { onSelect, city } = this.props;\n    onSelect(city);\n  };\n\n  render() {\n    const {city, isSelected} = this.props;\n    return (\n      <li\n        onClick={this.onClick}\n        className={`list-item ${isSelected ? \"is-selected\" : \"\"}`}\n      >\n      {city.title}\n      </li>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./list.css\";\nimport CityItem from \"./CityItem\";\n\nexport default ({cities, currentCity, onSelect}) => {\n  return (\n  <ul className=\"list\">\n      {cities.map(city => {\n        return <CityItem\n        isSelected={currentCity.title === city.title}\n        city={city}\n        onSelect={onSelect}/>\n\n      })}\n  </ul>\n );\n};\n","import React from 'react';\nimport CitiesList from \"./CitiesList\";\nimport \"./button.css\";\n\nexport default ({onClick, cities, currentCity, onSelect}) => {\n  return (\n    <div className=\"card-back\">\n      <CitiesList\n      cities={cities}\n      currentCity={currentCity}\n      onSelect={onSelect}\n      />\n      <button className=\"button\" onClick={onClick}>Check this city!</button>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport FrontSide from \"./FrontSide\";\nimport BackSide from \"./BackSide\";\nimport \"./panel.css\";\nimport cities from \"./cities.json\"\n// import \"./index.css\";\n\nclass App extends Component {\n\nstate = {flipped: false, currentCity: cities[0]};\n\n\n onFlip =() => {\n    this.setState({flipped: !this.state.flipped});\n };\n\n onSelectCity = (city) => {\n   this.setState({currentCity: city})\n }\n\n\n  render() {\n    return (\n    \t<div className={`panel ${this.state.flipped ? 'flip' : \"\"}`}>\n      \t\t<div className=\"panel-front\">\n            <FrontSide onClick={this.onFlip} currentCity={this.state.currentCity}/>\n          </div>\n       \t\t<div className=\"panel-back\">\n            <BackSide\n              cities={cities}\n              onClick={this.onFlip}\n              currentCity={this.state.currentCity}\n              onSelect={this.onSelectCity}\n              />\n          </div>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}